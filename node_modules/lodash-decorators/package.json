{
  "_args": [
    [
      {
        "raw": "lodash-decorators@^4.3.4",
        "scope": null,
        "escapedName": "lodash-decorators",
        "name": "lodash-decorators",
        "rawSpec": "^4.3.4",
        "spec": ">=4.3.4 <5.0.0",
        "type": "range"
      },
      "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\@ciscospark\\plugin-phone"
    ]
  ],
  "_from": "lodash-decorators@>=4.3.4 <5.0.0",
  "_id": "lodash-decorators@4.5.0",
  "_inCache": true,
  "_location": "/lodash-decorators",
  "_nodeVersion": "8.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/lodash-decorators-4.5.0.tgz_1509712636217_0.6889368400443345"
  },
  "_npmUser": {
    "name": "steelsojka",
    "email": "steelsojka@gmail.com"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lodash-decorators@^4.3.4",
    "scope": null,
    "escapedName": "lodash-decorators",
    "name": "lodash-decorators",
    "rawSpec": "^4.3.4",
    "spec": ">=4.3.4 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ciscospark/media-engine-webrtc",
    "/@ciscospark/plugin-phone"
  ],
  "_resolved": "https://registry.npmjs.org/lodash-decorators/-/lodash-decorators-4.5.0.tgz",
  "_shasum": "a4bb63dfbb512f0dd9409f7af452e4e2edcb80f4",
  "_shrinkwrap": null,
  "_spec": "lodash-decorators@^4.3.4",
  "_where": "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\@ciscospark\\plugin-phone",
  "author": {
    "name": "Steven Sojka",
    "email": "steelsojka@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/steelsojka/lodash-decorators/issues"
  },
  "dependencies": {
    "tslib": "^1.7.1"
  },
  "description": "A collection of decorators using lodash at it's core.",
  "devDependencies": {
    "@types/chai": "^3.5.1",
    "@types/lodash": "^4.14.63",
    "@types/mocha": "^2.2.41",
    "@types/node": "^7.0.13",
    "@types/sinon": "^2.1.3",
    "chai": "~2.2.0",
    "del-cli": "^0.2.1",
    "doctoc": "^1.3.0",
    "esdoc": "^0.5.2",
    "http-server": "^0.9.0",
    "lodash": "^4.17.4",
    "mocha": "^3.3.0",
    "sinon": "~1.14.1",
    "standard-version": "^4.0.0",
    "ts-node": "^3.0.2",
    "tslint": "^5.1.0",
    "tslint-language-service": "^0.9.2",
    "typescript": "~2.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-isfVBBSzzXu7Z6abY/Bit5hCbM+gPhQx/DluTPAmzUPF3KRtvLLRNBgVFUxw6B8vwTMGyQFRVqbvQBli9hsXZA==",
    "shasum": "a4bb63dfbb512f0dd9409f7af452e4e2edcb80f4",
    "tarball": "https://registry.npmjs.org/lodash-decorators/-/lodash-decorators-4.5.0.tgz"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "gitHead": "c992b72dc64ac4c39d504a38fc9362ca345c01ef",
  "homepage": "https://github.com/steelsojka/lodash-decorators#readme",
  "keywords": [
    "lodash",
    "decorators",
    "ES7",
    "ES2016",
    "utility"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "steelsojka",
      "email": "steelsojka@gmail.com"
    }
  ],
  "name": "lodash-decorators",
  "optionalDependencies": {},
  "peerDependencies": {
    "lodash": "4.x"
  },
  "readme": "# lodash-decorators\n\nDecorators using lodash functions. View the [API docs](https://steelsojka.github.io/lodash-decorators) for more in depth documentation.\n\n[![Build Status](https://travis-ci.org/steelsojka/lodash-decorators.svg)](https://travis-ci.org/steelsojka/lodash-decorators)\n[![npm version](https://badge.fury.io/js/lodash-decorators.svg)](http://badge.fury.io/js/lodash-decorators)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n  - [Polyfills](#polyfills)\n- [Usage](#usage)\n  - [Decorators](#decorators)\n    - [Example](#example)\n  - [Partials](#partials)\n    - [Example](#example-1)\n  - [Composition](#composition)\n    - [Example](#example-2)\n  - [Instance Decorators](#instance-decorators)\n  - [Mixin](#mixin)\n    - [Example](#example-3)\n  - [Attempt](#attempt)\n    - [Example](#example-4)\n  - [Bind](#bind)\n    - [Example](#example-5)\n    - [Example](#example-6)\n  - [v4 Breaking Changes](#v4-breaking-changes)\n    - [Not all decorators can be applied to or forced on getters/setters.](#not-all-decorators-can-be-applied-to-or-forced-on-getterssetters)\n    - [No longer force instance decorator onto prototype](#no-longer-force-instance-decorator-onto-prototype)\n    - [All decorators now take arguments](#all-decorators-now-take-arguments)\n    - [Removal of extensions and validation package](#removal-of-extensions-and-validation-package)\n    - [Prototype decorator order no longer throws an error](#prototype-decorator-order-no-longer-throws-an-error)\n    - [Other breaking changes](#other-breaking-changes)\n  - [v4 Improvements](#v4-improvements)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Install\n\n`npm install --save lodash lodash-decorators`\n\n### Polyfills\n\nThis library requires `Map` and `WeakMap` to be available globally. If `Map` or `WeakMap` is not supported in your environment then use a polyfill.\n\n## Usage\n\nFor more in depth documentation please visit [Lodash](http://lodash.com/docs)\n\nDecorators are exported as both start case and lower case.\n\n`import { Debounce } from 'lodash-decorators';`\n\nis the same as\n\n`import { debounce } from 'lodash-decorators';`\n\nThey can also be imported directly.\n\n`import Debounce from 'lodash-decorators/debounce';`\n\n### Decorators\n\nThese decorators are included in the package. These are also exported as lowercase for those who prefer lowercase decorators.\n\n-   `After`\n-   `AfterAll`\n-   `Ary`\n-   `Attempt`\n-   `Before`\n-   `BeforeAll`\n-   `Bind`\n-   `BindAll`\n-   `Curry`\n-   `CurryAll`\n-   `CurryRight`\n-   `CurryRightAll`\n-   `Debounce`\n-   `DebounceAll`\n-   `Defer`\n-   `Delay`\n-   `Flip`\n-   `Flow`\n-   `FlowRight`\n-   `Memoize`\n-   `MemoizeAll`\n-   `Mixin`\n-   `Negate`\n-   `Once`\n-   `OnceAll`\n-   `OverArgs`\n-   `Partial`\n-   `PartialRight`\n-   `Rearg`\n-   `Rest`\n-   `Spread`\n-   `Tap`\n-   `Throttle`\n-   `ThrottleAll`\n-   `ThrottleGetter`\n-   `ThrottleSetter`\n-   `Unary`\n-   `Wrap`\n\n#### Example\n\n```javascript\nimport { Debounce, Memoize } from 'lodash-decorators';\n\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  @Debounce(100)\n  save(date) {\n    return this.httpService.post(data);\n  }\n\n  @Memoize(item => item.id)\n  doSomeHeavyProcessing(arg1, arg2) {}\n}\n```\n\n### Partials\n\nSome decorators work slightly differently than you would expect\nthem to work than lodash.\n\n-   `Partial`\n-   `PartialRight`\n-   `Wrap`\n\nThese can take a `Function` as their first argument or a `String`.\nIf the argument is a `String` then a `Function` is resolved from\nthe current object.\n\n#### Example\n\n```javascript\nimport { Partial } from 'lodash-decorators'\n\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  getName(type) {\n    return type === 'firstName' ? this.firstName : this.lastName\n  }\n\n  @Partial('getName', 'firstName')\n  getFirstName() {}\n\n  @Partial('getName', null)\n  getLastName() {}\n\n  @Wrap('getName')\n  getUpperCaseName(fn) {\n    return fn().toUpperCase();\n  }\n}\n\nconst person = new Person('Joe', 'Smith');\n\nperson.getFirstName(); // 'Joe'\nperson.getLastName(); // 'Smith'\nperson.getUpperCaseName(); // JOE SMITH\n```\n\n### Composition\n\nYou can use methods like `compose` and `flow` similiar to\npartials. The arguments are resolved the same way partials\nare resolved.\n\n#### Example\n\n```javascript\nimport { Flow } from 'lodash-decorators'\nimport { kebabCase } from 'lodash';\n\nclass Person {\n  @Flow('getName', kebabCase)\n  logName;\n\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  getName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nconst person = new Person('Joe', 'Smith');\n\nperson.logName(); // joe-smith\n```\n\n### Instance Decorators\n\nNormally decorators are applied to the prototype method\nof the class you are working with, but with some of these\ndecorators that is not the desired behavour. These\ndecorators are applied at the instance level.\n\n-   `Debounce`\n-   `Throttle`\n-   `Memoize`\n-   `After`\n-   `Before`\n-   `Curry`\n-   `CurryRight`\n-   `Once`\n-   `Flow`\n-   `FlowRight`\n-   `Rearg`\n-   `Negate`\n-   `Flip`\n-   `Bind`\n-   `Partial`\n-   `PartialRight`\n\n### Mixin\n\nYou can mixin methods into a class by using the `Mixin` decorator.\n\n#### Example\n\n```javascript\nimport { Mixin } from 'lodash-decorators';\n\nconst MyOtherApi = {\n  someCoolMethod() {\n    // Do something cool\n  }\n};\n\n@Mixin(MyOtherApi)\nclass Person {}\n\nPerson.prototype.someCoolMethod === MyOtherApi.someCoolMethod; // => true\n```\n\n### Attempt\n\nYou can wrap a method in a lodash attempt method.\n\n#### Example\n\n```javascript\nimport { Attempt } from 'lodash-decorators';\n\nclass Person {\n  @Attempt()\n  throwAnError() {\n    throw new Error();\n  }\n\n  @Attempt()\n  doNotThrowAnError() {\n    return '0_o';\n  }\n}\n\nconst person = new Person();\n\nlet result = person.throwAnError();\n\nresult instanceof Error; // => true\n\nresult = person.doNotThrowAnError();\n\nresult === '0_o'; // => true\n```\n\n### Bind\n\nBind takes arguments based on lodash's bind and binds the `Function` to\nthe current instance object.\n\n#### Example\n\n```javascript\nimport { Bind } from 'lodash-decorators'\n\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  @Bind()\n  getName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  // It can also function as a partial\n  @Bind('Joe')\n  getUpperCaseName(name) {\n    return name.toUpperCase();\n  }\n}\n\nconst person = new Person('Joe', 'Smith');\n\nperson.getName.call(null); // Joe Smith\nperson.getUpperCaseName(); // JOE\n```\n\nYou can also bind entire classes with `bindAll` or `bind`.\n\n#### Example\n\n```javascript\nimport { BindAll } from 'lodash-decorators'\n\n@BindAll()\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  getName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nconst person = new Person('Joe', 'Smith');\n\nperson.getName.call(null); // Joe Smith\n```\n\n### v4 Breaking Changes\n\nVersion 4 is a rewrite of the library and has many breaking changes.\n\n#### Not all decorators can be applied to or forced on getters/setters.\n\nOnly certain decorators make sense to be applied to getters/setters. Before you could specify the target of the decorator like `debounce.set(15)`. This behavior is\nremoved and decorators that make sense to apply to getters/setters are configured to be applied to methods and either the getter or the setter. For example:\n\n```javascript\nclass MyClass {\n  // This only gets applied to the setter as it doesn't make sense to apply it to the getter.\n  @Debounce(1000) \n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n  }\n\n  @Debounce(15)\n  fn() {}\n}\n```\n\nThis keeps the API cleaner and doesn't require the developer to know how the decorator applies to the descriptor. Some decorators have explicit version that apply to either getters of setters, such as `ThrottleGetter` and `ThrottleSetter`.\n\n#### No longer force instance decorator onto prototype\n\nThere is no longer a `Proto` decorator attached to instance decorators. Most instance decorators now have a counterpart that applies to the prototype instead of the instance. `Debounce.Proto()` is now `DebounceAll()`.\n\n#### All decorators now take arguments\n\nAll decorators now take arguments. So instead of `@Once` you would do `@Once()`. This keeps the API consistent and doesn't require the develop to remember which decorators take arguments.\n\n#### Removal of extensions and validation package\n\nAll extensions like `enumerable` have been removed in favor of [core-decorators](https://github.com/jayphelps/core-decorators.js). There may be some slight over lap like `debounce` and `throttle`. Fair warning, instance decorators may not play nice with other implementations of instance decorators.\n\nWe want to keep lodash decorators focused specifically on lodash specific functions.\n\n#### Prototype decorator order no longer throws an error\n\nIf a prototype decorator comes after an instance decorator it will be ignored since there is no way to apply it in the chain.\n\n#### Other breaking changes\n\n-  `Attempt` now takes an argument to line up with lodash API.\n-  `Bind` used on a class no longer delegates to `BindAll`. Use `BindAll` instead.\n-  `Curry`, `Partial`, `Flow`, `FlowRight` are now instance decorators.\n\n### v4 Improvements\n\n-   Ships with TypeScript typings.\n-   Predictable performance.\n-   Improvements to Bind decorator.\n-   Improved API for decorator factory.\n-   More and better unit tests.\n-   Better performance with instance decorators.\n-   Single imports with `import { Debounce } from 'lodash-decorators/debounce'`;\n-   Composition decorators can be used on properties. These will generate the composed function.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/steelsojka/lodash-decorators.git"
  },
  "scripts": {
    "build": "tsc -p tsconfig.build.json",
    "build:clean": "del '*.js' '*.js.map' '*.d.ts' applicators factory utils",
    "build:docs": "tsc -p tsconfig.docs.json",
    "build:docs:clean": "del buildDocs",
    "build:test": "tsc -p tsconfig.test.json",
    "clean": "npm run build:clean; npm run build:docs:clean; npm run test:clean",
    "docs": "del docs && esdoc",
    "docs:publish": "git subtree push --prefix docs origin gh-pages",
    "docs:serve": "http-server ./docs",
    "lint": "tslint src/**",
    "lint:fix": "tslint src/** --fix",
    "postdocs": "npm run build:docs:clean",
    "posttest": "npm run test:clean",
    "prebuild": "npm run lint && npm run build:clean",
    "prebuild:docs": "npm run build:docs:clean",
    "prebuild:test": "npm run test:clean",
    "predocs": "npm run build:docs",
    "pretest": "npm run build:test",
    "readme": "doctoc ./README.md",
    "release": "npm run build && npm run docs && npm run readme",
    "test": "mocha --opts mocha.opts",
    "test:clean": "del test",
    "version": "standard-version"
  },
  "version": "4.5.0"
}
