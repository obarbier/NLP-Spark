{
  "_args": [
    [
      {
        "raw": "@xmpp/jid@^0.0.2",
        "scope": "@xmpp",
        "escapedName": "@xmpp%2fjid",
        "name": "@xmpp/jid",
        "rawSpec": "^0.0.2",
        "spec": ">=0.0.2 <0.0.3",
        "type": "range"
      },
      "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\node-xmpp-core"
    ]
  ],
  "_from": "@xmpp/jid@>=0.0.2 <0.0.3",
  "_id": "@xmpp/jid@0.0.2",
  "_inCache": true,
  "_location": "/@xmpp/jid",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/jid-0.0.2.tgz_1488570290904_0.6538452210370451"
  },
  "_npmUser": {
    "name": "xmpp",
    "email": "sonny+xmpp@fastmail.net"
  },
  "_npmVersion": "4.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@xmpp/jid@^0.0.2",
    "scope": "@xmpp",
    "escapedName": "@xmpp%2fjid",
    "name": "@xmpp/jid",
    "rawSpec": "^0.0.2",
    "spec": ">=0.0.2 <0.0.3",
    "type": "range"
  },
  "_requiredBy": [
    "/node-xmpp-core"
  ],
  "_resolved": "https://registry.npmjs.org/@xmpp/jid/-/jid-0.0.2.tgz",
  "_shasum": "0d528ca9d58dafc833665564ffe62f332a3167f2",
  "_shrinkwrap": null,
  "_spec": "@xmpp/jid@^0.0.2",
  "_where": "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\node-xmpp-core",
  "bugs": {
    "url": "http://github.com/node-xmpp/node-xmpp/issues"
  },
  "dependencies": {},
  "description": "XMPP identifiers (JID) for JavaScript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "0d528ca9d58dafc833665564ffe62f332a3167f2",
    "tarball": "https://registry.npmjs.org/@xmpp/jid/-/jid-0.0.2.tgz"
  },
  "homepage": "https://github.com/node-xmpp/node-xmpp/tree/master/packages/jid",
  "keywords": [
    "XMPP",
    "JID"
  ],
  "license": "ISC",
  "maintainers": [
    {
      "name": "xmpp",
      "email": "sonny+xmpp@fastmail.net"
    }
  ],
  "name": "@xmpp/jid",
  "optionalDependencies": {},
  "readme": "JID\n===\n\nXMPP identifiers (JID) for JavaScript\n\n| JID type | local | @ |     domain     | / |  resource  |          usage         |\n|:--------:|:-----:|:-:|:--------------:|:-:|:----------:|:----------------------:|\n|  domain  |       |   | wonderland.net |   |            | servers and components |\n|   bare   | alice | @ | wonderland.net |   |            | users                  |\n|   full   | alice | @ | wonderland.net | / | rabbithole | user resource (device) |\n\nhttps://en.wikipedia.org/wiki/XMPP#Decentralization_and_addressing\n\n## Install\n\n```\nnpm install @xmpp/jid\n```\n\n## Usage\n\n```javascript\nvar JID = require('@xmpp/jid')\n\n/*\n * All return an instance of JID.JID, the new operator is optional.\n */\nvar addr = new JID('alice@wonderland.net/rabbithole')          // OK\nvar addr = JID`${'alice'}@${'wonderland.net'}/${'rabbithole'}` // OK, es6 tagged template string\nvar addr = new JID('alice', 'wonderland.net', 'rabbithole')    // BEST; see section on escaping below\n\naddr instanceof JID.JID // true\n\n// domain JIDs are created passing the domain as the first argument\nvar addr = JID('wonderland.net')\n\n/*\n * local\n */\naddr.local = 'alice'\naddr.local      // alice\n// same as\naddr.setLocal('alice')\naddr.getLocal() // alice\n\n/*\n * domain\n */\naddr.domain = 'wonderland.net'\naddr.domain      // wonderland.net\n// same as\naddr.setDomain('wonderland.net')\naddr.getDomain() // wonderland.net\n\n/*\n * resource\n */\naddr.resource = 'rabbithole'\naddr.resource      // rabbithole\n// same as\naddr.setResource('rabbithole')\naddr.getResource() // rabbithole\n\naddr.toString() // alice@wonderland.net/rabbithole\naddr.bare()     // returns a JID without resource\n\naddr.equals(some_jid) // returns true if the two JIDs are equal, false otherwise\n// same as\nJID.equal(addr, some_jid)\n\nJID.is(addr) // returns true if the passed argument is an instance of JID.JID, false otherwise\n```\n\n## Escaping\n\nThe [XEP-0106](http://xmpp.org/extensions/xep-0106.html) defines a method to escape and unescape characters that aren't allowed in the local part of the JID. This library fully implement it but because `@` and `/` are ones of them and used as JID separators, you should always prefer the following syntax\n\n```javascript\n// GOOD\nnew JID(local, domain, resource)\n```\n\nover\n\n```javascript\n// BAD\nnew JID(local@domain/resource)\n```\n\nfor user input.\n\n## References\n\n* [RFC 7622 XMPP Address Format](https://tools.ietf.org/html/rfc7622) mostly implemented, l10n WIP\n* [XEP-0106 JID Escaping](https://xmpp.org/extensions/xep-0106.html) implemented\n\n### Deprecated\n\n* [XEP-0029 Definition of Jabber Identifiers (JIDs)](https://xmpp.org/extensions/xep-0029.html) 2003\n* [RFC 3920 XMPP addressing](https://tools.ietf.org/html/rfc3920#section-3) 2004\n* [RFC 3920 XMPP Address Format](https://tools.ietf.org/html/rfc6122) 2011\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-xmpp/node-xmpp.git"
  },
  "scripts": {
    "bundle": "../../node_modules/.bin/browserify index.js -s JID -o bundle.js",
    "prepublish": "npm run bundle"
  },
  "version": "0.0.2"
}
