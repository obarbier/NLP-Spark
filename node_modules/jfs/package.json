{
  "_args": [
    [
      {
        "raw": "jfs@^0.3.0",
        "scope": null,
        "escapedName": "jfs",
        "name": "jfs",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\botkit"
    ]
  ],
  "_from": "jfs@>=0.3.0 <0.4.0",
  "_id": "jfs@0.3.0",
  "_inCache": true,
  "_location": "/jfs",
  "_nodeVersion": "6.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jfs-0.3.0.tgz_1509989469505_0.5407429086044431"
  },
  "_npmUser": {
    "name": "flosse",
    "email": "mail@markus-kohlhase.de"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "lodash": "4.17.10"
  },
  "_requested": {
    "raw": "jfs@^0.3.0",
    "scope": null,
    "escapedName": "jfs",
    "name": "jfs",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/botkit"
  ],
  "_resolved": "https://registry.npmjs.org/jfs/-/jfs-0.3.0.tgz",
  "_shasum": "5abce44643b0d0d2d95164396868f22bb1558b04",
  "_shrinkwrap": null,
  "_spec": "jfs@^0.3.0",
  "_where": "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\botkit",
  "author": {
    "name": "Markus Kohlhase",
    "email": "mail@markus-kohlhase.de"
  },
  "bugs": {
    "url": "http://github.com/flosse/json-file-store/issues"
  },
  "dependencies": {
    "async": "~2.5.0",
    "clone": "~2.1.1",
    "mkdirp": "~0.5.1",
    "uuid": "^3.1.0"
  },
  "description": "A simple JSON file store",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-cli": "^6.18.0",
    "babel-preset-es2015": "^6.18.0",
    "chai": "~3.5.0",
    "coveralls": "~2.11.14",
    "istanbul": "~0.4.5",
    "mocha": "~3.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "5abce44643b0d0d2d95164396868f22bb1558b04",
    "tarball": "https://registry.npmjs.org/jfs/-/jfs-0.3.0.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "f44e0930dc86e0881f6f852b7cdcd89777b20cfc",
  "homepage": "http://github.com/flosse/json-file-store",
  "license": "MIT",
  "main": "./Store",
  "maintainers": [
    {
      "name": "Markus Kohlhase",
      "email": "mail@markus-kohlhase.de",
      "url": "http://github.com/flosse/"
    }
  ],
  "name": "jfs",
  "optionalDependencies": {},
  "readme": "# JSON file store\n\nA simple JSON file store for node.js.\n\n[![Build Status](https://secure.travis-ci.org/flosse/json-file-store.svg?branch=master)](http://travis-ci.org/flosse/json-file-store)\n[![Dependency Status](https://gemnasium.com/flosse/json-file-store.svg)](https://gemnasium.com/flosse/json-file-store)\n[![NPM version](https://badge.fury.io/js/jfs.svg)](http://badge.fury.io/js/jfs)\n[![License](https://img.shields.io/npm/l/jfs.svg)](https://github.com/flosse/json-file-store/blob/master/LICENCE.txt)\n\nWARNING:\nDon't use it if you want to persist a large amount of objects.\nUse a real DB instead.\n\n## Install\n\n    npm install jfs --save\n\n## Usage\n\n```javascript\nvar Store = require(\"jfs\");\nvar db = new Store(\"data\");\n\nvar d = {\n  foo: \"bar\"\n};\n\n// save with custom ID\ndb.save(\"anId\", d, function(err){\n  // now the data is stored in the file data/anId.json\n});\n\n// save with generated ID\ndb.save(d, function(err, id){\n  // id is a unique ID\n});\n\n// save synchronously\nvar id = db.saveSync(\"anId\", d);\n\ndb.get(\"anId\", function(err, obj){\n  // obj = { foo: \"bar\" }\n})\n\n// pretty print file content\nvar prettyDB = new Store(\"data\",{pretty:true});\nvar id = prettyDB.saveSync({foo:{bar:\"baz\"}});\n// now the file content is formated in this way:\n{\n  \"foo\": {\n    \"bar\": \"baz\"\n  }\n}\n// instead of this:\n{\"foo\":{\"bar\":\"baz\"}}\n\n// get synchronously\nvar obj = db.getSync(\"anId\");\n\n// get all available objects\ndb.all(function(err, objs){\n  // objs is a map: ID => OBJECT\n});\n\n// get all synchronously\nvar objs = db.allSync()\n\n// delete by ID\ndb.delete(\"myId\", function(err){\n  // the file data/myId.json was removed\n});\n\n// delete synchronously\ndb.delete(\"myId\");\n```\n\n### Single file DB\n\nIf you want to store all objects in a single file,\nset the `type` option to `single`:\n\n```javascript\nvar db = new Store(\"data\",{type:'single'});\n```\n\nor point to a JSON file:\n\n```javascript\nvar db = new Store(\"./path/to/data.json\");\n```\n\n### In memory DB\n\nIf you don't want to persist your data, you can set `type` to `memory`:\n\n```javascript\nvar db = new Store(\"data\",{type:'memory'});\n```\n\n### ID storage\n\nBy default the ID is not stored within your object.\nIf you like, you can change that behavior by setting `saveId` to `true`\nor a custom ID\n\n```javascript\nvar db = new Store(\"data\",{saveId:'myKey'});\n```\n\n### custom ID generator\nWe use uuid v4 for ID generation if you don't pass an id when save a data. If you want, you can pass custom generator.\n```javascript\nvar i = 0;\nvar db = new Store(\"data\",{\n  idGenerator: function() {\n    i = i + 1;\n    return i;\n  }\n});\n```\n\n\n## Tests\n\n    npm test\n\n## License\n\nThis project is licensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/flosse/json-file-store.git"
  },
  "scripts": {
    "build": "babel Store.es6.js -o Store.js && babel Store.spec.es6.js -o Store.spec.js",
    "coveralls": "istanbul cover ./node_modules/.bin/_mocha --report lcovonly && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "lint": "echo \"WARN: no linting process specified\"",
    "prepublish": "npm run build",
    "test": "npm run lint && npm run build && ./node_modules/.bin/mocha --reporter spec *.spec.js"
  },
  "version": "0.3.0"
}
