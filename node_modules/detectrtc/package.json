{
  "_args": [
    [
      {
        "raw": "detectrtc@^1.3.4",
        "scope": null,
        "escapedName": "detectrtc",
        "name": "detectrtc",
        "rawSpec": "^1.3.4",
        "spec": ">=1.3.4 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\@ciscospark\\plugin-phone"
    ]
  ],
  "_from": "detectrtc@>=1.3.4 <2.0.0",
  "_id": "detectrtc@1.3.6",
  "_inCache": true,
  "_location": "/detectrtc",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/detectrtc_1.3.6_1525523182424_0.5212593827964489"
  },
  "_npmUser": {
    "name": "muaz-khan",
    "email": "muazkh@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "detectrtc@^1.3.4",
    "scope": null,
    "escapedName": "detectrtc",
    "name": "detectrtc",
    "rawSpec": "^1.3.4",
    "spec": ">=1.3.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ciscospark/plugin-phone"
  ],
  "_resolved": "https://registry.npmjs.org/detectrtc/-/detectrtc-1.3.6.tgz",
  "_shasum": "dabc0353981a3da7732de969071c08b6dddd5b59",
  "_shrinkwrap": null,
  "_spec": "detectrtc@^1.3.4",
  "_where": "C:\\Users\\obarbier\\Desktop\\Main Folder\\Projects\\Chatbox with NLP\\Project\\NLP-Spark\\node_modules\\@ciscospark\\plugin-phone",
  "analyze": false,
  "author": {
    "name": "Muaz Khan",
    "email": "muazkh@gmail.com",
    "url": "http://www.muazkhan.com/"
  },
  "bugs": {
    "url": "https://github.com/muaz-khan/DetectRTC/issues",
    "email": "muazkh@gmail.com"
  },
  "dependencies": {},
  "description": "A tiny JavaScript library that can be used to detect WebRTC features e.g. system having speakers, microphone or webcam, screen capturing is supported, number of audio/video devices etc.",
  "devDependencies": {
    "grunt": "0.4.5",
    "grunt-bump": "0.7.0",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "0.6.0",
    "grunt-contrib-concat": "0.5.1",
    "grunt-contrib-csslint": "0.5.0",
    "grunt-contrib-jshint": "0.11.3",
    "grunt-contrib-uglify": "0.11.0",
    "grunt-jsbeautifier": "0.2.10",
    "grunt-replace": "0.11.0",
    "load-grunt-tasks": "3.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "dabc0353981a3da7732de969071c08b6dddd5b59",
    "tarball": "https://registry.npmjs.org/detectrtc/-/detectrtc-1.3.6.tgz",
    "fileCount": 9,
    "unpackedSize": 104182,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7aLwCRA9TVsSAnZWagAAvuwP/27TQjhQjfTZwQoqP7XL\ne2tnEuGzQTL/JO4U1uo0kYT1RJp4TePRDSIgRVyeGTM7Yx+kjwwRAYLJxUGn\nwRfiONkRxHnpTwhr+8O1KkiCCsVHLqz+sSV5S/sBx8NjkXfRUNRKETVx2HQ8\n4lF1UHEn80JpNSCuEhV4uO4TqMT/3uWufdfD8XyjUSLyN3sl9D1hv1XrUCAg\nE0SRX8LITsR1jHlcjv+Peph3UBckEmx4Z80D3ouh8M5ctLw9FjUxhsBTiBaj\n/atlhC9w3YJ4GnfiTAT8UMYLpyhc1CKVz/pNdYy2IHlsSKO0mNoEALBTbUg7\nNi/TPHLW85ngCZ4Gnq5j/NpX2kF+brhtMhimp6iKLUWGClE01qYKleT7VaqJ\nadq9xcFv+2AH7erIWrNVHJWBH1KL4FkRy/TCGuDQ7jcGo5oIY+sYUE4IZ6nz\nvkDY2JQmVL7rgThiuEAldgNwmcFTKammTYo+f/OnzGBjWXRR1EuNLxU8p8jq\nFC6s9OFIMATG0G5fjx5Svo09XrqFHMGi5pzcVOx3q831D29jTEhD5ctBerDb\n7+amiie7OuhpFf3J5AnQj3/xuYgbzt4Khg06VISW7k7IcLCdJqDumniclM7l\ng0qRFTg9dwVKBMJMp3Nm92IIGYX0kTx1qIk5sA5kBdK0MiZOEWyE9Mm2xgRY\n4H0C\r\n=ehuL\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "344a75c949d8fab854aa03e7a8530b40dd408318",
  "homepage": "https://www.webrtc-experiment.com/DetectRTC/",
  "keywords": [
    "webrtc",
    "detectrtc",
    "webrtc-library",
    "library",
    "javascript",
    "rtcweb",
    "webrtc-experiment",
    "javascript-library",
    "muaz",
    "muaz-khan"
  ],
  "license": "MIT",
  "main": "DetectRTC.js",
  "maintainers": [
    {
      "name": "muaz-khan",
      "email": "muazkh@gmail.com"
    }
  ],
  "name": "detectrtc",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# DetectRTC | Is WebRTC Supported In Your Browser?\r\n\r\n[![npm](https://img.shields.io/npm/v/detectrtc.svg)](https://npmjs.org/package/detectrtc) [![downloads](https://img.shields.io/npm/dm/detectrtc.svg)](https://npmjs.org/package/detectrtc)  [![Build Status: Linux](https://travis-ci.org/muaz-khan/DetectRTC.png?branch=master)](https://travis-ci.org/muaz-khan/DetectRTC) <a href=\"https://www.browserstack.com\"><img src=\"https://webrtcweb.com/browserstack.svg\" height=\"20px\" /></a>\r\n\r\n### Live Demo: https://www.webrtc-experiment.com/DetectRTC/\r\n\r\n```javascript\r\nif (DetectRTC.isWebRTCSupported === false) {\r\n    alert('Please use Chrome or Firefox.');\r\n}\r\n\r\nif (DetectRTC.hasWebcam === false) {\r\n    alert('Please install an external webcam device.');\r\n}\r\n\r\nif (DetectRTC.hasMicrophone === false) {\r\n    alert('Please install an external microphone device.');\r\n}\r\n\r\nif (DetectRTC.hasSpeakers === false && (DetectRTC.browser.name === 'Chrome' || DetectRTC.browser.name === 'Edge')) {\r\n    alert('Oops, your system can not play audios.');\r\n}\r\n```\r\n\r\n## What is this?\r\n\r\nA tiny JavaScript library that can be used to detect WebRTC features e.g. system having speakers, microphone or webcam, screen capturing is supported, number of audio/video devices etc.\r\n\r\n## Free?\r\n\r\nIt is <a href=\"https://www.webrtc-experiment.com/licence/\">MIT Licenced</a>, which means that you can use it in any commercial/non-commercial product, free of cost.\r\n\r\n## Tests?\r\n\r\n* https://travis-ci.org/muaz-khan/DetectRTC\r\n\r\n## Releases?\r\n\r\n* https://github.com/muaz-khan/DetectRTC/releases\r\n\r\n## How to install?\r\n\r\n```\r\nnpm install detectrtc --production\r\n\r\n# or via \"bower\"\r\nbower install detectrtc\r\n```\r\n\r\n# Proposed NEW API\r\n\r\n```javascript\r\nDetectRTC.isSetSinkIdSupported                  // (implemented)\r\nDetectRTC.isRTPSenderReplaceTracksSupported     // (implemented)\r\nDetectRTC.isORTCSupported                       // (implemented)\r\nDetectRTC.isRemoteStreamProcessingSupported     // (implemented)\r\n\r\nDetectRTC.isWebsiteHasWebcamPermissions        // (implemented)\r\nDetectRTC.isWebsiteHasMicrophonePermissions    // (implemented)\r\n\r\nDetectRTC.audioInputDevices    // (implemented)\r\nDetectRTC.audioOutputDevices   // (implemented)\r\nDetectRTC.videoInputDevices    // (implemented)\r\n\r\n// Below API are NOT implemented yet\r\nDetectRTC.browser.googSupportedFlags.googDAEEchoCancellation\r\nDetecRTC.browser.googSupportedFlags.echoCancellation\r\nDetectRTC.isMediaHintsSupportsNewSyntax\r\n```\r\n\r\n# LocalHost\r\n\r\n```sh\r\nnode server.js\r\n\r\n# or\r\nnpm start\r\n\r\n# and open:\r\nhttp://127.0.0.1:9001\r\n\r\n# or\r\nhttp://localhost:9001\r\n```\r\n\r\n# NPM\r\n\r\n```javascript\r\nvar DetectRTC = require('detectrtc');\r\n\r\nconsole.log(DetectRTC.browser);\r\n\r\nDetectRTC.load(function() {\r\n    console.log(DetectRTC);\r\n});\r\n```\r\n\r\n* Live NPM test: https://tonicdev.com/npm/detectrtc\r\n\r\nOr try `npm-test.js`:\r\n\r\n```sh\r\ncd node_modules\r\ncd detectrtc\r\n\r\n# npm test\r\n# or\r\nnode npm-test.js\r\n```\r\n\r\n# How to link the script?\r\n\r\n```html\r\n<script src=\"./node_modules/detectrtc/DetectRTC.js\"></script>\r\n\r\n<!-- or bower -->\r\n<script src=\"./bower_components/detectrtc/DetectRTC.js\"></script>\r\n\r\n<!-- or CDN link (suggested) -->\r\n<script src=\"https://cdn.webrtc-experiment.com/DetectRTC.js\"></script>\r\n\r\n<!-- or RawGit (if CDN fails) -->\r\n<script src=\"https://cdn.rawgit.com/muaz-khan/DetectRTC/master/DetectRTC.js\"></script>\r\n```\r\n\r\nYou can even link specific versions:\r\n\r\n```html\r\n<script src=\"https://github.com/muaz-khan/DetectRTC/releases/download/1.3.6/DetectRTC.js\"></script>\r\n```\r\n\r\n<img src=\"https://cdn.webrtc-experiment.com/images/DetectRTC.png\" style=\"width:100%;\" />\r\n\r\n# How to use it?\r\n\r\n```javascript\r\n// for node.js users\r\nvar DetectRTC = require('detectrtc');\r\n\r\n// non-nodejs users can skip above line\r\n// below code will work for all users\r\n\r\nDetectRTC.load(function() {\r\n    DetectRTC.hasWebcam; // (has webcam device!)\r\n    DetectRTC.hasMicrophone; // (has microphone device!)\r\n    DetectRTC.hasSpeakers; // (has speakers!)\r\n    DetectRTC.isScreenCapturingSupported; // Chrome, Firefox, Opera, Edge and Android\r\n    DetectRTC.isSctpDataChannelsSupported;\r\n    DetectRTC.isRtpDataChannelsSupported;\r\n    DetectRTC.isAudioContextSupported;\r\n    DetectRTC.isWebRTCSupported;\r\n    DetectRTC.isDesktopCapturingSupported;\r\n    DetectRTC.isMobileDevice;\r\n\r\n    DetectRTC.isWebSocketsSupported;\r\n    DetectRTC.isWebSocketsBlocked;\r\n    DetectRTC.checkWebSocketsSupport(callback);\r\n\r\n    DetectRTC.isWebsiteHasWebcamPermissions;        // getUserMedia allowed for HTTPs domain in Chrome?\r\n    DetectRTC.isWebsiteHasMicrophonePermissions;    // getUserMedia allowed for HTTPs domain in Chrome?\r\n\r\n    DetectRTC.audioInputDevices;    // microphones\r\n    DetectRTC.audioOutputDevices;   // speakers\r\n    DetectRTC.videoInputDevices;    // cameras\r\n\r\n    DetectRTC.osName;\r\n    DetectRTC.osVersion;\r\n\r\n    DetectRTC.browser.name === 'Edge' || 'Chrome' || 'Firefox';\r\n    DetectRTC.browser.version;\r\n    DetectRTC.browser.isChrome;\r\n    DetectRTC.browser.isFirefox;\r\n    DetectRTC.browser.isOpera;\r\n    DetectRTC.browser.isIE;\r\n    DetectRTC.browser.isSafari;\r\n    DetectRTC.browser.isEdge;\r\n\r\n    DetectRTC.browser.isPrivateBrowsing; // incognito or private modes\r\n\r\n    DetectRTC.isCanvasSupportsStreamCapturing;\r\n    DetectRTC.isVideoSupportsStreamCapturing;\r\n\r\n    DetectRTC.DetectLocalIPAddress(callback);\r\n});\r\n```\r\n\r\n# `DetectRTC.version`\r\n\r\nDetectRTC is supporting `version` property since `1.3.6`.\r\n\r\n``javascript\r\nif(DetectRTC.version === '1.3.6') {\r\n    alert('We are using DetectRTC version 1.3.6');\r\n}\r\n```\r\n\r\n# Why `load` method?\r\n\r\nIf you're not detecting audio/video input/output devices then you can skip this method.\r\n\r\n`DetectRTC.load` simply makes sure that all devices are captured and valid result is set for relevant properties.\r\n\r\n# How to fix devices' labels?\r\n\r\nYou need to check for `device.isCustomLabel` boolean. If this boolean is `true` then assume that DetectRTC given a custom label to the device.\r\n\r\nYou must getUserMedia request whenever you find `isCustomLabel===true`. getUserMedia request will return valid device labels.\r\n\r\n```javascript\r\nif (DetectRTC.MediaDevices[0] && DetectRTC.MediaDevices[0].isCustomLabel) {\r\n    // it seems that we did not make getUserMedia request yet\r\n    navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: true\r\n    }).then(function(stream) {\r\n        var video;\r\n        try {\r\n            video = document.createElement('video');\r\n            video.muted = true;\r\n            video.src = URL.createObjectURL(stream);\r\n            video.style.display = 'none';\r\n            (document.body || document.documentElement).appendChild(vide);\r\n        } catch (e) {}\r\n\r\n        DetectRTC.load(function() {\r\n            DetectRTC.videoInputDevices.forEach(function(device, idx) {\r\n                // ------------------------------\r\n                // now you get valid label here\r\n                console.log(device.label);\r\n                // ------------------------------\r\n            });\r\n\r\n            // release camera\r\n            stream.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n\r\n            if (video && video.parentNode) {\r\n                video.parentNode.removeChild(video);\r\n            }\r\n        });\r\n    });\r\n} else {\r\n    DetectRTC.videoInputDevices.forEach(function(device, idx) {\r\n        console.log(device.label);\r\n    });\r\n}\r\n```\r\n\r\n# How to select specific camera?\r\n\r\nDemo: [https://jsfiddle.net/cf90az9q/](https://jsfiddle.net/cf90az9q/)\r\n\r\n```html\r\n<script src=\"https://cdn.webrtc-experiment.com/DetectRTC/CheckDeviceSupport.js\"></script>\r\n<script>\r\nfunction selectSecondaryCamera() {\r\n    checkDeviceSupport(function() {\r\n        var secondDevice = videoInputDevices[1];\r\n        if(!secondDevice) return alert('Secondary webcam is NOT available.');\r\n\r\n        var videoConstraints = {\r\n            deviceId: secondDevice.deviceId\r\n        };\r\n\r\n        if(!!navigator.webkitGetUserMedia) {\r\n            videoConstraints = {\r\n                mandatory: {},\r\n                optional: [{\r\n                    sourceId: secondDevice.deviceId\r\n                }]\r\n            }\r\n        }\r\n\r\n        navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia;\r\n        navigator.getUserMedia({ video: videoConstraints }, function(stream) {\r\n            //\r\n        }, function(error) {\r\n            alert(JSON.stringify(error));\r\n        });\r\n    });\r\n}\r\n</script>\r\n```\r\n\r\nFor further tricks & usages:\r\n\r\n* https://www.webrtc-experiment.com/webrtcpedia/#modify-streams\r\n\r\n# Rules to Contribute\r\n\r\n```sh\r\nmkdir DetectRTC\r\ncd DetectRTC\r\ngit clone git://github.com/muaz-khan/DetectRTC.git ./\r\n\r\n# install grunt for code style verifications\r\nnpm install grunt-cli\r\n\r\n# install all dependencies\r\nnpm install --save-dev\r\n\r\n# verify your changes\r\n# npm test  # or \"grunt\"\r\ngrunt\r\n\r\n# Success? Make a pull request!\r\n```\r\n\r\n# Github\r\n\r\n* https://github.com/muaz-khan/DetectRTC\r\n\r\n# Tests powered by\r\n\r\n<a href=\"https://www.browserstack.com\"><img src=\"https://webrtcweb.com/browserstack.svg\" height=\"32px\" /></a>\r\n\r\n**Check tests here:** https://travis-ci.org/muaz-khan/DetectRTC\r\n\r\n# License\r\n\r\n[DetectRTC.js](https://github.com/muaz-khan/DetectRTC) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](http://www.MuazKhan.com/).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muaz-khan/DetectRTC.git"
  },
  "scripts": {
    "start": "node server.js",
    "test": "protractor test/browserstack.config.js"
  },
  "tonicExampleFilename": "npm-test.js",
  "version": "1.3.6"
}
